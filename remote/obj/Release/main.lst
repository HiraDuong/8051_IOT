                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _EX1_ISR
                                     12 	.globl _TIMER0_ISR
                                     13 	.globl _main
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _F1
                                     21 	.globl _P
                                     22 	.globl _PS
                                     23 	.globl _PT1
                                     24 	.globl _PX1
                                     25 	.globl _PT0
                                     26 	.globl _PX0
                                     27 	.globl _RD
                                     28 	.globl _WR
                                     29 	.globl _T1
                                     30 	.globl _T0
                                     31 	.globl _INT1
                                     32 	.globl _INT0
                                     33 	.globl _TXD
                                     34 	.globl _RXD
                                     35 	.globl _P3_7
                                     36 	.globl _P3_6
                                     37 	.globl _P3_5
                                     38 	.globl _P3_4
                                     39 	.globl _P3_3
                                     40 	.globl _P3_2
                                     41 	.globl _P3_1
                                     42 	.globl _P3_0
                                     43 	.globl _EA
                                     44 	.globl _ES
                                     45 	.globl _ET1
                                     46 	.globl _EX1
                                     47 	.globl _ET0
                                     48 	.globl _EX0
                                     49 	.globl _P2_7
                                     50 	.globl _P2_6
                                     51 	.globl _P2_5
                                     52 	.globl _P2_4
                                     53 	.globl _P2_3
                                     54 	.globl _P2_2
                                     55 	.globl _P2_1
                                     56 	.globl _P2_0
                                     57 	.globl _SM0
                                     58 	.globl _SM1
                                     59 	.globl _SM2
                                     60 	.globl _REN
                                     61 	.globl _TB8
                                     62 	.globl _RB8
                                     63 	.globl _TI
                                     64 	.globl _RI
                                     65 	.globl _P1_7
                                     66 	.globl _P1_6
                                     67 	.globl _P1_5
                                     68 	.globl _P1_4
                                     69 	.globl _P1_3
                                     70 	.globl _P1_2
                                     71 	.globl _P1_1
                                     72 	.globl _P1_0
                                     73 	.globl _TF1
                                     74 	.globl _TR1
                                     75 	.globl _TF0
                                     76 	.globl _TR0
                                     77 	.globl _IE1
                                     78 	.globl _IT1
                                     79 	.globl _IE0
                                     80 	.globl _IT0
                                     81 	.globl _P0_7
                                     82 	.globl _P0_6
                                     83 	.globl _P0_5
                                     84 	.globl _P0_4
                                     85 	.globl _P0_3
                                     86 	.globl _P0_2
                                     87 	.globl _P0_1
                                     88 	.globl _P0_0
                                     89 	.globl _B
                                     90 	.globl _ACC
                                     91 	.globl _PSW
                                     92 	.globl _IP
                                     93 	.globl _P3
                                     94 	.globl _IE
                                     95 	.globl _P2
                                     96 	.globl _SBUF
                                     97 	.globl _SCON
                                     98 	.globl _P1
                                     99 	.globl _TH1
                                    100 	.globl _TH0
                                    101 	.globl _TL1
                                    102 	.globl _TL0
                                    103 	.globl _TMOD
                                    104 	.globl _TCON
                                    105 	.globl _PCON
                                    106 	.globl _DPH
                                    107 	.globl _DPL
                                    108 	.globl _SP
                                    109 	.globl _P0
                                    110 	.globl _command
                                    111 	.globl _duration
                                    112 	.globl _count
                                    113 ;--------------------------------------------------------
                                    114 ; special function registers
                                    115 ;--------------------------------------------------------
                                    116 	.area RSEG    (ABS,DATA)
      000000                        117 	.org 0x0000
                           000080   118 _P0	=	0x0080
                           000081   119 _SP	=	0x0081
                           000082   120 _DPL	=	0x0082
                           000083   121 _DPH	=	0x0083
                           000087   122 _PCON	=	0x0087
                           000088   123 _TCON	=	0x0088
                           000089   124 _TMOD	=	0x0089
                           00008A   125 _TL0	=	0x008a
                           00008B   126 _TL1	=	0x008b
                           00008C   127 _TH0	=	0x008c
                           00008D   128 _TH1	=	0x008d
                           000090   129 _P1	=	0x0090
                           000098   130 _SCON	=	0x0098
                           000099   131 _SBUF	=	0x0099
                           0000A0   132 _P2	=	0x00a0
                           0000A8   133 _IE	=	0x00a8
                           0000B0   134 _P3	=	0x00b0
                           0000B8   135 _IP	=	0x00b8
                           0000D0   136 _PSW	=	0x00d0
                           0000E0   137 _ACC	=	0x00e0
                           0000F0   138 _B	=	0x00f0
                                    139 ;--------------------------------------------------------
                                    140 ; special function bits
                                    141 ;--------------------------------------------------------
                                    142 	.area RSEG    (ABS,DATA)
      000000                        143 	.org 0x0000
                           000080   144 _P0_0	=	0x0080
                           000081   145 _P0_1	=	0x0081
                           000082   146 _P0_2	=	0x0082
                           000083   147 _P0_3	=	0x0083
                           000084   148 _P0_4	=	0x0084
                           000085   149 _P0_5	=	0x0085
                           000086   150 _P0_6	=	0x0086
                           000087   151 _P0_7	=	0x0087
                           000088   152 _IT0	=	0x0088
                           000089   153 _IE0	=	0x0089
                           00008A   154 _IT1	=	0x008a
                           00008B   155 _IE1	=	0x008b
                           00008C   156 _TR0	=	0x008c
                           00008D   157 _TF0	=	0x008d
                           00008E   158 _TR1	=	0x008e
                           00008F   159 _TF1	=	0x008f
                           000090   160 _P1_0	=	0x0090
                           000091   161 _P1_1	=	0x0091
                           000092   162 _P1_2	=	0x0092
                           000093   163 _P1_3	=	0x0093
                           000094   164 _P1_4	=	0x0094
                           000095   165 _P1_5	=	0x0095
                           000096   166 _P1_6	=	0x0096
                           000097   167 _P1_7	=	0x0097
                           000098   168 _RI	=	0x0098
                           000099   169 _TI	=	0x0099
                           00009A   170 _RB8	=	0x009a
                           00009B   171 _TB8	=	0x009b
                           00009C   172 _REN	=	0x009c
                           00009D   173 _SM2	=	0x009d
                           00009E   174 _SM1	=	0x009e
                           00009F   175 _SM0	=	0x009f
                           0000A0   176 _P2_0	=	0x00a0
                           0000A1   177 _P2_1	=	0x00a1
                           0000A2   178 _P2_2	=	0x00a2
                           0000A3   179 _P2_3	=	0x00a3
                           0000A4   180 _P2_4	=	0x00a4
                           0000A5   181 _P2_5	=	0x00a5
                           0000A6   182 _P2_6	=	0x00a6
                           0000A7   183 _P2_7	=	0x00a7
                           0000A8   184 _EX0	=	0x00a8
                           0000A9   185 _ET0	=	0x00a9
                           0000AA   186 _EX1	=	0x00aa
                           0000AB   187 _ET1	=	0x00ab
                           0000AC   188 _ES	=	0x00ac
                           0000AF   189 _EA	=	0x00af
                           0000B0   190 _P3_0	=	0x00b0
                           0000B1   191 _P3_1	=	0x00b1
                           0000B2   192 _P3_2	=	0x00b2
                           0000B3   193 _P3_3	=	0x00b3
                           0000B4   194 _P3_4	=	0x00b4
                           0000B5   195 _P3_5	=	0x00b5
                           0000B6   196 _P3_6	=	0x00b6
                           0000B7   197 _P3_7	=	0x00b7
                           0000B0   198 _RXD	=	0x00b0
                           0000B1   199 _TXD	=	0x00b1
                           0000B2   200 _INT0	=	0x00b2
                           0000B3   201 _INT1	=	0x00b3
                           0000B4   202 _T0	=	0x00b4
                           0000B5   203 _T1	=	0x00b5
                           0000B6   204 _WR	=	0x00b6
                           0000B7   205 _RD	=	0x00b7
                           0000B8   206 _PX0	=	0x00b8
                           0000B9   207 _PT0	=	0x00b9
                           0000BA   208 _PX1	=	0x00ba
                           0000BB   209 _PT1	=	0x00bb
                           0000BC   210 _PS	=	0x00bc
                           0000D0   211 _P	=	0x00d0
                           0000D1   212 _F1	=	0x00d1
                           0000D2   213 _OV	=	0x00d2
                           0000D3   214 _RS0	=	0x00d3
                           0000D4   215 _RS1	=	0x00d4
                           0000D5   216 _F0	=	0x00d5
                           0000D6   217 _AC	=	0x00d6
                           0000D7   218 _CY	=	0x00d7
                                    219 ;--------------------------------------------------------
                                    220 ; overlayable register banks
                                    221 ;--------------------------------------------------------
                                    222 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        223 	.ds 8
                                    224 ;--------------------------------------------------------
                                    225 ; internal ram data
                                    226 ;--------------------------------------------------------
                                    227 	.area DSEG    (DATA)
      000000                        228 _count::
      000000                        229 	.ds 2
      000002                        230 _duration::
      000002                        231 	.ds 66
      000044                        232 _command::
      000044                        233 	.ds 64
                                    234 ;--------------------------------------------------------
                                    235 ; overlayable items in internal ram
                                    236 ;--------------------------------------------------------
                                    237 	.area	OSEG    (OVR,DATA)
                                    238 ;--------------------------------------------------------
                                    239 ; Stack segment in internal ram
                                    240 ;--------------------------------------------------------
                                    241 	.area	SSEG
      000000                        242 __start__stack:
      000000                        243 	.ds	1
                                    244 
                                    245 ;--------------------------------------------------------
                                    246 ; indirectly addressable internal ram data
                                    247 ;--------------------------------------------------------
                                    248 	.area ISEG    (DATA)
                                    249 ;--------------------------------------------------------
                                    250 ; absolute internal ram data
                                    251 ;--------------------------------------------------------
                                    252 	.area IABS    (ABS,DATA)
                                    253 	.area IABS    (ABS,DATA)
                                    254 ;--------------------------------------------------------
                                    255 ; bit data
                                    256 ;--------------------------------------------------------
                                    257 	.area BSEG    (BIT)
                                    258 ;--------------------------------------------------------
                                    259 ; paged external ram data
                                    260 ;--------------------------------------------------------
                                    261 	.area PSEG    (PAG,XDATA)
                                    262 ;--------------------------------------------------------
                                    263 ; external ram data
                                    264 ;--------------------------------------------------------
                                    265 	.area XSEG    (XDATA)
                                    266 ;--------------------------------------------------------
                                    267 ; absolute external ram data
                                    268 ;--------------------------------------------------------
                                    269 	.area XABS    (ABS,XDATA)
                                    270 ;--------------------------------------------------------
                                    271 ; external initialized ram data
                                    272 ;--------------------------------------------------------
                                    273 	.area XISEG   (XDATA)
                                    274 	.area HOME    (CODE)
                                    275 	.area GSINIT0 (CODE)
                                    276 	.area GSINIT1 (CODE)
                                    277 	.area GSINIT2 (CODE)
                                    278 	.area GSINIT3 (CODE)
                                    279 	.area GSINIT4 (CODE)
                                    280 	.area GSINIT5 (CODE)
                                    281 	.area GSINIT  (CODE)
                                    282 	.area GSFINAL (CODE)
                                    283 	.area CSEG    (CODE)
                                    284 ;--------------------------------------------------------
                                    285 ; interrupt vector
                                    286 ;--------------------------------------------------------
                                    287 	.area HOME    (CODE)
      000000                        288 __interrupt_vect:
      000000 02r00r00         [24]  289 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  290 	reti
      000004                        291 	.ds	7
      00000B 02r00r93         [24]  292 	ljmp	_TIMER0_ISR
      00000E                        293 	.ds	5
      000013 02r00rA4         [24]  294 	ljmp	_EX1_ISR
                                    295 ;--------------------------------------------------------
                                    296 ; global & static initialisations
                                    297 ;--------------------------------------------------------
                                    298 	.area HOME    (CODE)
                                    299 	.area GSINIT  (CODE)
                                    300 	.area GSFINAL (CODE)
                                    301 	.area GSINIT  (CODE)
                                    302 	.globl __sdcc_gsinit_startup
                                    303 	.globl __sdcc_program_startup
                                    304 	.globl __start__stack
                                    305 	.globl __mcs51_genXINIT
                                    306 	.globl __mcs51_genXRAMCLEAR
                                    307 	.globl __mcs51_genRAMCLEAR
                                    308 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  309 	ljmp	__sdcc_program_startup
                                    310 ;--------------------------------------------------------
                                    311 ; Home
                                    312 ;--------------------------------------------------------
                                    313 	.area HOME    (CODE)
                                    314 	.area HOME    (CODE)
      000016                        315 __sdcc_program_startup:
      000016 02r00r00         [24]  316 	ljmp	_main
                                    317 ;	return from main will return to caller
                                    318 ;--------------------------------------------------------
                                    319 ; code
                                    320 ;--------------------------------------------------------
                                    321 	.area CSEG    (CODE)
                                    322 ;------------------------------------------------------------
                                    323 ;Allocation info for local variables in function 'main'
                                    324 ;------------------------------------------------------------
                                    325 ;i                         Allocated to registers r6 r7 
                                    326 ;------------------------------------------------------------
                                    327 ;	main.c:11: void main(void)
                                    328 ;	-----------------------------------------
                                    329 ;	 function main
                                    330 ;	-----------------------------------------
      000000                        331 _main:
                           000007   332 	ar7 = 0x07
                           000006   333 	ar6 = 0x06
                           000005   334 	ar5 = 0x05
                           000004   335 	ar4 = 0x04
                           000003   336 	ar3 = 0x03
                           000002   337 	ar2 = 0x02
                           000001   338 	ar1 = 0x01
                           000000   339 	ar0 = 0x00
                                    340 ;	main.c:13: count = 0;
      000000 E4               [12]  341 	clr	a
      000001 F5*00            [12]  342 	mov	_count,a
      000003 F5*01            [12]  343 	mov	(_count + 1),a
                                    344 ;	main.c:15: LED = 0;
                                    345 ;	assignBit
      000005 C2 A7            [12]  346 	clr	_P2_7
                                    347 ;	main.c:16: LED7SEG_DATA = 0x00;
      000007 75 80 00         [24]  348 	mov	_P0,#0x00
                                    349 ;	main.c:19: TMOD = 0x02;    //timer 0 mode 2
      00000A 75 89 02         [24]  350 	mov	_TMOD,#0x02
                                    351 ;	main.c:20: TH0 = 25;       //auto reload, period ~0.25ms
      00000D 75 8C 19         [24]  352 	mov	_TH0,#0x19
                                    353 ;	main.c:21: TL0 = 0;
      000010 75 8A 00         [24]  354 	mov	_TL0,#0x00
                                    355 ;	main.c:23: P3_0 = 1;
                                    356 ;	assignBit
      000013 D2 B0            [12]  357 	setb	_P3_0
                                    358 ;	main.c:26: IE  = 0b10000110;
      000015 75 A8 86         [24]  359 	mov	_IE,#0x86
                                    360 ;	main.c:27: TF0 = 0;
                                    361 ;	assignBit
      000018 C2 8D            [12]  362 	clr	_TF0
                                    363 ;	main.c:28: TR0 = 1;
                                    364 ;	assignBit
      00001A D2 8C            [12]  365 	setb	_TR0
                                    366 ;	main.c:31: while(1)
      00001C                        367 00110$:
                                    368 ;	main.c:33: if (count > 40) {
      00001C C3               [12]  369 	clr	c
      00001D 74 28            [12]  370 	mov	a,#0x28
      00001F 95*00            [12]  371 	subb	a,_count
      000021 74 80            [12]  372 	mov	a,#(0x00 ^ 0x80)
      000023 85*01 F0         [24]  373 	mov	b,(_count + 1)
      000026 63 F0 80         [24]  374 	xrl	b,#0x80
      000029 95 F0            [12]  375 	subb	a,b
      00002B 50 EF            [24]  376 	jnc	00110$
                                    377 ;	main.c:34: count = 0;
      00002D E4               [12]  378 	clr	a
      00002E F5*00            [12]  379 	mov	_count,a
      000030 F5*01            [12]  380 	mov	(_count + 1),a
                                    381 ;	main.c:35: for (int i = 0;i<32;i++){
      000032 7E 00            [12]  382 	mov	r6,#0x00
      000034 7F 00            [12]  383 	mov	r7,#0x00
      000036                        384 00113$:
      000036 C3               [12]  385 	clr	c
      000037 EE               [12]  386 	mov	a,r6
      000038 94 20            [12]  387 	subb	a,#0x20
      00003A EF               [12]  388 	mov	a,r7
      00003B 64 80            [12]  389 	xrl	a,#0x80
      00003D 94 80            [12]  390 	subb	a,#0x80
      00003F 50 DB            [24]  391 	jnc	00110$
                                    392 ;	main.c:36: if (count <7){
      000041 C3               [12]  393 	clr	c
      000042 E5*00            [12]  394 	mov	a,_count
      000044 94 07            [12]  395 	subb	a,#0x07
      000046 E5*01            [12]  396 	mov	a,(_count + 1)
      000048 64 80            [12]  397 	xrl	a,#0x80
      00004A 94 80            [12]  398 	subb	a,#0x80
      00004C 50 12            [24]  399 	jnc	00102$
                                    400 ;	main.c:37: command[i] = 0;
      00004E EE               [12]  401 	mov	a,r6
      00004F 2E               [12]  402 	add	a,r6
      000050 FC               [12]  403 	mov	r4,a
      000051 EF               [12]  404 	mov	a,r7
      000052 33               [12]  405 	rlc	a
      000053 EC               [12]  406 	mov	a,r4
      000054 24r44            [12]  407 	add	a,#_command
      000056 F8               [12]  408 	mov	r0,a
      000057 76 00            [12]  409 	mov	@r0,#0x00
      000059 08               [12]  410 	inc	r0
                                    411 ;	main.c:38: count = 0;
      00005A E4               [12]  412 	clr	a
      00005B F6               [12]  413 	mov	@r0,a
      00005C F5*00            [12]  414 	mov	_count,a
      00005E F5*01            [12]  415 	mov	(_count + 1),a
      000060                        416 00102$:
                                    417 ;	main.c:40: if (count < 40 && count >= 7){
      000060 C3               [12]  418 	clr	c
      000061 E5*00            [12]  419 	mov	a,_count
      000063 94 28            [12]  420 	subb	a,#0x28
      000065 E5*01            [12]  421 	mov	a,(_count + 1)
      000067 64 80            [12]  422 	xrl	a,#0x80
      000069 94 80            [12]  423 	subb	a,#0x80
      00006B 50 1F            [24]  424 	jnc	00114$
      00006D C3               [12]  425 	clr	c
      00006E E5*00            [12]  426 	mov	a,_count
      000070 94 07            [12]  427 	subb	a,#0x07
      000072 E5*01            [12]  428 	mov	a,(_count + 1)
      000074 64 80            [12]  429 	xrl	a,#0x80
      000076 94 80            [12]  430 	subb	a,#0x80
      000078 40 12            [24]  431 	jc	00114$
                                    432 ;	main.c:41: command [i] = 1;
      00007A EE               [12]  433 	mov	a,r6
      00007B 2E               [12]  434 	add	a,r6
      00007C FC               [12]  435 	mov	r4,a
      00007D EF               [12]  436 	mov	a,r7
      00007E 33               [12]  437 	rlc	a
      00007F EC               [12]  438 	mov	a,r4
      000080 24r44            [12]  439 	add	a,#_command
      000082 F8               [12]  440 	mov	r0,a
      000083 76 01            [12]  441 	mov	@r0,#0x01
      000085 08               [12]  442 	inc	r0
                                    443 ;	main.c:42: count = 0;
      000086 E4               [12]  444 	clr	a
      000087 F6               [12]  445 	mov	@r0,a
      000088 F5*00            [12]  446 	mov	_count,a
      00008A F5*01            [12]  447 	mov	(_count + 1),a
      00008C                        448 00114$:
                                    449 ;	main.c:35: for (int i = 0;i<32;i++){
      00008C 0E               [12]  450 	inc	r6
      00008D BE 00 A6         [24]  451 	cjne	r6,#0x00,00113$
      000090 0F               [12]  452 	inc	r7
                                    453 ;	main.c:48: }
      000091 80 A3            [24]  454 	sjmp	00113$
                                    455 ;------------------------------------------------------------
                                    456 ;Allocation info for local variables in function 'TIMER0_ISR'
                                    457 ;------------------------------------------------------------
                                    458 ;	main.c:50: void TIMER0_ISR() __interrupt TF0_VECTOR
                                    459 ;	-----------------------------------------
                                    460 ;	 function TIMER0_ISR
                                    461 ;	-----------------------------------------
      000093                        462 _TIMER0_ISR:
      000093 C0 E0            [24]  463 	push	acc
      000095 C0 D0            [24]  464 	push	psw
                                    465 ;	main.c:52: count++;
      000097 05*00            [12]  466 	inc	_count
      000099 E4               [12]  467 	clr	a
      00009A B5*00 02         [24]  468 	cjne	a,_count,00103$
      00009D 05*01            [12]  469 	inc	(_count + 1)
      00009F                        470 00103$:
                                    471 ;	main.c:53: }
      00009F D0 D0            [24]  472 	pop	psw
      0000A1 D0 E0            [24]  473 	pop	acc
      0000A3 32               [24]  474 	reti
                                    475 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    476 ;	eliminated unneeded push/pop dpl
                                    477 ;	eliminated unneeded push/pop dph
                                    478 ;	eliminated unneeded push/pop b
                                    479 ;------------------------------------------------------------
                                    480 ;Allocation info for local variables in function 'EX1_ISR'
                                    481 ;------------------------------------------------------------
                                    482 ;	main.c:55: void EX1_ISR() __interrupt IE1_VECTOR
                                    483 ;	-----------------------------------------
                                    484 ;	 function EX1_ISR
                                    485 ;	-----------------------------------------
      0000A4                        486 _EX1_ISR:
      0000A4 C0 E0            [24]  487 	push	acc
                                    488 ;	main.c:57: count = 0;
      0000A6 E4               [12]  489 	clr	a
      0000A7 F5*00            [12]  490 	mov	_count,a
      0000A9 F5*01            [12]  491 	mov	(_count + 1),a
                                    492 ;	main.c:58: }
      0000AB D0 E0            [24]  493 	pop	acc
      0000AD 32               [24]  494 	reti
                                    495 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    496 ;	eliminated unneeded push/pop not_psw
                                    497 ;	eliminated unneeded push/pop dpl
                                    498 ;	eliminated unneeded push/pop dph
                                    499 ;	eliminated unneeded push/pop b
                                    500 	.area CSEG    (CODE)
                                    501 	.area CONST   (CODE)
                                    502 	.area XINIT   (CODE)
                                    503 	.area CABS    (ABS,CODE)
