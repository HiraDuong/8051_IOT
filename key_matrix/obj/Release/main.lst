                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _keyscan
                                     13 	.globl _delay
                                     14 	.globl _LCD_Write_String
                                     15 	.globl _LCD_Send_Command
                                     16 	.globl _LCD_init
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _F1
                                     24 	.globl _P
                                     25 	.globl _PS
                                     26 	.globl _PT1
                                     27 	.globl _PX1
                                     28 	.globl _PT0
                                     29 	.globl _PX0
                                     30 	.globl _RD
                                     31 	.globl _WR
                                     32 	.globl _T1
                                     33 	.globl _T0
                                     34 	.globl _INT1
                                     35 	.globl _INT0
                                     36 	.globl _TXD
                                     37 	.globl _RXD
                                     38 	.globl _P3_7
                                     39 	.globl _P3_6
                                     40 	.globl _P3_5
                                     41 	.globl _P3_4
                                     42 	.globl _P3_3
                                     43 	.globl _P3_2
                                     44 	.globl _P3_1
                                     45 	.globl _P3_0
                                     46 	.globl _EA
                                     47 	.globl _ES
                                     48 	.globl _ET1
                                     49 	.globl _EX1
                                     50 	.globl _ET0
                                     51 	.globl _EX0
                                     52 	.globl _P2_7
                                     53 	.globl _P2_6
                                     54 	.globl _P2_5
                                     55 	.globl _P2_4
                                     56 	.globl _P2_3
                                     57 	.globl _P2_2
                                     58 	.globl _P2_1
                                     59 	.globl _P2_0
                                     60 	.globl _SM0
                                     61 	.globl _SM1
                                     62 	.globl _SM2
                                     63 	.globl _REN
                                     64 	.globl _TB8
                                     65 	.globl _RB8
                                     66 	.globl _TI
                                     67 	.globl _RI
                                     68 	.globl _P1_7
                                     69 	.globl _P1_6
                                     70 	.globl _P1_5
                                     71 	.globl _P1_4
                                     72 	.globl _P1_3
                                     73 	.globl _P1_2
                                     74 	.globl _P1_1
                                     75 	.globl _P1_0
                                     76 	.globl _TF1
                                     77 	.globl _TR1
                                     78 	.globl _TF0
                                     79 	.globl _TR0
                                     80 	.globl _IE1
                                     81 	.globl _IT1
                                     82 	.globl _IE0
                                     83 	.globl _IT0
                                     84 	.globl _P0_7
                                     85 	.globl _P0_6
                                     86 	.globl _P0_5
                                     87 	.globl _P0_4
                                     88 	.globl _P0_3
                                     89 	.globl _P0_2
                                     90 	.globl _P0_1
                                     91 	.globl _P0_0
                                     92 	.globl _B
                                     93 	.globl _ACC
                                     94 	.globl _PSW
                                     95 	.globl _IP
                                     96 	.globl _P3
                                     97 	.globl _IE
                                     98 	.globl _P2
                                     99 	.globl _SBUF
                                    100 	.globl _SCON
                                    101 	.globl _P1
                                    102 	.globl _TH1
                                    103 	.globl _TH0
                                    104 	.globl _TL1
                                    105 	.globl _TL0
                                    106 	.globl _TMOD
                                    107 	.globl _TCON
                                    108 	.globl _PCON
                                    109 	.globl _DPH
                                    110 	.globl _DPL
                                    111 	.globl _SP
                                    112 	.globl _P0
                                    113 	.globl _key
                                    114 	.globl _keypressed
                                    115 ;--------------------------------------------------------
                                    116 ; special function registers
                                    117 ;--------------------------------------------------------
                                    118 	.area RSEG    (ABS,DATA)
      000000                        119 	.org 0x0000
                           000080   120 _P0	=	0x0080
                           000081   121 _SP	=	0x0081
                           000082   122 _DPL	=	0x0082
                           000083   123 _DPH	=	0x0083
                           000087   124 _PCON	=	0x0087
                           000088   125 _TCON	=	0x0088
                           000089   126 _TMOD	=	0x0089
                           00008A   127 _TL0	=	0x008a
                           00008B   128 _TL1	=	0x008b
                           00008C   129 _TH0	=	0x008c
                           00008D   130 _TH1	=	0x008d
                           000090   131 _P1	=	0x0090
                           000098   132 _SCON	=	0x0098
                           000099   133 _SBUF	=	0x0099
                           0000A0   134 _P2	=	0x00a0
                           0000A8   135 _IE	=	0x00a8
                           0000B0   136 _P3	=	0x00b0
                           0000B8   137 _IP	=	0x00b8
                           0000D0   138 _PSW	=	0x00d0
                           0000E0   139 _ACC	=	0x00e0
                           0000F0   140 _B	=	0x00f0
                                    141 ;--------------------------------------------------------
                                    142 ; special function bits
                                    143 ;--------------------------------------------------------
                                    144 	.area RSEG    (ABS,DATA)
      000000                        145 	.org 0x0000
                           000080   146 _P0_0	=	0x0080
                           000081   147 _P0_1	=	0x0081
                           000082   148 _P0_2	=	0x0082
                           000083   149 _P0_3	=	0x0083
                           000084   150 _P0_4	=	0x0084
                           000085   151 _P0_5	=	0x0085
                           000086   152 _P0_6	=	0x0086
                           000087   153 _P0_7	=	0x0087
                           000088   154 _IT0	=	0x0088
                           000089   155 _IE0	=	0x0089
                           00008A   156 _IT1	=	0x008a
                           00008B   157 _IE1	=	0x008b
                           00008C   158 _TR0	=	0x008c
                           00008D   159 _TF0	=	0x008d
                           00008E   160 _TR1	=	0x008e
                           00008F   161 _TF1	=	0x008f
                           000090   162 _P1_0	=	0x0090
                           000091   163 _P1_1	=	0x0091
                           000092   164 _P1_2	=	0x0092
                           000093   165 _P1_3	=	0x0093
                           000094   166 _P1_4	=	0x0094
                           000095   167 _P1_5	=	0x0095
                           000096   168 _P1_6	=	0x0096
                           000097   169 _P1_7	=	0x0097
                           000098   170 _RI	=	0x0098
                           000099   171 _TI	=	0x0099
                           00009A   172 _RB8	=	0x009a
                           00009B   173 _TB8	=	0x009b
                           00009C   174 _REN	=	0x009c
                           00009D   175 _SM2	=	0x009d
                           00009E   176 _SM1	=	0x009e
                           00009F   177 _SM0	=	0x009f
                           0000A0   178 _P2_0	=	0x00a0
                           0000A1   179 _P2_1	=	0x00a1
                           0000A2   180 _P2_2	=	0x00a2
                           0000A3   181 _P2_3	=	0x00a3
                           0000A4   182 _P2_4	=	0x00a4
                           0000A5   183 _P2_5	=	0x00a5
                           0000A6   184 _P2_6	=	0x00a6
                           0000A7   185 _P2_7	=	0x00a7
                           0000A8   186 _EX0	=	0x00a8
                           0000A9   187 _ET0	=	0x00a9
                           0000AA   188 _EX1	=	0x00aa
                           0000AB   189 _ET1	=	0x00ab
                           0000AC   190 _ES	=	0x00ac
                           0000AF   191 _EA	=	0x00af
                           0000B0   192 _P3_0	=	0x00b0
                           0000B1   193 _P3_1	=	0x00b1
                           0000B2   194 _P3_2	=	0x00b2
                           0000B3   195 _P3_3	=	0x00b3
                           0000B4   196 _P3_4	=	0x00b4
                           0000B5   197 _P3_5	=	0x00b5
                           0000B6   198 _P3_6	=	0x00b6
                           0000B7   199 _P3_7	=	0x00b7
                           0000B0   200 _RXD	=	0x00b0
                           0000B1   201 _TXD	=	0x00b1
                           0000B2   202 _INT0	=	0x00b2
                           0000B3   203 _INT1	=	0x00b3
                           0000B4   204 _T0	=	0x00b4
                           0000B5   205 _T1	=	0x00b5
                           0000B6   206 _WR	=	0x00b6
                           0000B7   207 _RD	=	0x00b7
                           0000B8   208 _PX0	=	0x00b8
                           0000B9   209 _PT0	=	0x00b9
                           0000BA   210 _PX1	=	0x00ba
                           0000BB   211 _PT1	=	0x00bb
                           0000BC   212 _PS	=	0x00bc
                           0000D0   213 _P	=	0x00d0
                           0000D1   214 _F1	=	0x00d1
                           0000D2   215 _OV	=	0x00d2
                           0000D3   216 _RS0	=	0x00d3
                           0000D4   217 _RS1	=	0x00d4
                           0000D5   218 _F0	=	0x00d5
                           0000D6   219 _AC	=	0x00d6
                           0000D7   220 _CY	=	0x00d7
                                    221 ;--------------------------------------------------------
                                    222 ; overlayable register banks
                                    223 ;--------------------------------------------------------
                                    224 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        225 	.ds 8
                                    226 ;--------------------------------------------------------
                                    227 ; internal ram data
                                    228 ;--------------------------------------------------------
                                    229 	.area DSEG    (DATA)
      000000                        230 _keypressed::
      000000                        231 	.ds 2
      000002                        232 _key::
      000002                        233 	.ds 2
      000004                        234 _main_key_char_65536_20:
      000004                        235 	.ds 3
                                    236 ;--------------------------------------------------------
                                    237 ; overlayable items in internal ram
                                    238 ;--------------------------------------------------------
                                    239 ;--------------------------------------------------------
                                    240 ; Stack segment in internal ram
                                    241 ;--------------------------------------------------------
                                    242 	.area	SSEG
      000000                        243 __start__stack:
      000000                        244 	.ds	1
                                    245 
                                    246 ;--------------------------------------------------------
                                    247 ; indirectly addressable internal ram data
                                    248 ;--------------------------------------------------------
                                    249 	.area ISEG    (DATA)
                                    250 ;--------------------------------------------------------
                                    251 ; absolute internal ram data
                                    252 ;--------------------------------------------------------
                                    253 	.area IABS    (ABS,DATA)
                                    254 	.area IABS    (ABS,DATA)
                                    255 ;--------------------------------------------------------
                                    256 ; bit data
                                    257 ;--------------------------------------------------------
                                    258 	.area BSEG    (BIT)
                                    259 ;--------------------------------------------------------
                                    260 ; paged external ram data
                                    261 ;--------------------------------------------------------
                                    262 	.area PSEG    (PAG,XDATA)
                                    263 ;--------------------------------------------------------
                                    264 ; external ram data
                                    265 ;--------------------------------------------------------
                                    266 	.area XSEG    (XDATA)
                                    267 ;--------------------------------------------------------
                                    268 ; absolute external ram data
                                    269 ;--------------------------------------------------------
                                    270 	.area XABS    (ABS,XDATA)
                                    271 ;--------------------------------------------------------
                                    272 ; external initialized ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area XISEG   (XDATA)
                                    275 	.area HOME    (CODE)
                                    276 	.area GSINIT0 (CODE)
                                    277 	.area GSINIT1 (CODE)
                                    278 	.area GSINIT2 (CODE)
                                    279 	.area GSINIT3 (CODE)
                                    280 	.area GSINIT4 (CODE)
                                    281 	.area GSINIT5 (CODE)
                                    282 	.area GSINIT  (CODE)
                                    283 	.area GSFINAL (CODE)
                                    284 	.area CSEG    (CODE)
                                    285 ;--------------------------------------------------------
                                    286 ; interrupt vector
                                    287 ;--------------------------------------------------------
                                    288 	.area HOME    (CODE)
      000000                        289 __interrupt_vect:
      000000 02r00r00         [24]  290 	ljmp	__sdcc_gsinit_startup
                                    291 ;--------------------------------------------------------
                                    292 ; global & static initialisations
                                    293 ;--------------------------------------------------------
                                    294 	.area HOME    (CODE)
                                    295 	.area GSINIT  (CODE)
                                    296 	.area GSFINAL (CODE)
                                    297 	.area GSINIT  (CODE)
                                    298 	.globl __sdcc_gsinit_startup
                                    299 	.globl __sdcc_program_startup
                                    300 	.globl __start__stack
                                    301 	.globl __mcs51_genXINIT
                                    302 	.globl __mcs51_genXRAMCLEAR
                                    303 	.globl __mcs51_genRAMCLEAR
                                    304 ;	main.c:6: int keypressed = 0;
      000000 E4               [12]  305 	clr	a
      000001 F5*00            [12]  306 	mov	_keypressed,a
      000003 F5*01            [12]  307 	mov	(_keypressed + 1),a
                                    308 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  309 	ljmp	__sdcc_program_startup
                                    310 ;--------------------------------------------------------
                                    311 ; Home
                                    312 ;--------------------------------------------------------
                                    313 	.area HOME    (CODE)
                                    314 	.area HOME    (CODE)
      000003                        315 __sdcc_program_startup:
      000003 02r00rCD         [24]  316 	ljmp	_main
                                    317 ;	return from main will return to caller
                                    318 ;--------------------------------------------------------
                                    319 ; code
                                    320 ;--------------------------------------------------------
                                    321 	.area CSEG    (CODE)
                                    322 ;------------------------------------------------------------
                                    323 ;Allocation info for local variables in function 'delay'
                                    324 ;------------------------------------------------------------
                                    325 ;time                      Allocated to registers 
                                    326 ;i                         Allocated to registers r4 r5 
                                    327 ;------------------------------------------------------------
                                    328 ;	main.c:8: void delay(int time){
                                    329 ;	-----------------------------------------
                                    330 ;	 function delay
                                    331 ;	-----------------------------------------
      000000                        332 _delay:
                           000007   333 	ar7 = 0x07
                           000006   334 	ar6 = 0x06
                           000005   335 	ar5 = 0x05
                           000004   336 	ar4 = 0x04
                           000003   337 	ar3 = 0x03
                           000002   338 	ar2 = 0x02
                           000001   339 	ar1 = 0x01
                           000000   340 	ar0 = 0x00
      000000 85 82*00         [24]  341 	mov	__mulint_PARM_2,dpl
      000003 85 83*01         [24]  342 	mov	(__mulint_PARM_2 + 1),dph
                                    343 ;	main.c:9: for(int i = 0;i<time*10000;i++){
      000006 90 27 10         [24]  344 	mov	dptr,#0x2710
      000009 12r00r00         [24]  345 	lcall	__mulint
      00000C AE 82            [24]  346 	mov	r6,dpl
      00000E AF 83            [24]  347 	mov	r7,dph
      000010 7C 00            [12]  348 	mov	r4,#0x00
      000012 7D 00            [12]  349 	mov	r5,#0x00
      000014                        350 00103$:
      000014 C3               [12]  351 	clr	c
      000015 EC               [12]  352 	mov	a,r4
      000016 9E               [12]  353 	subb	a,r6
      000017 ED               [12]  354 	mov	a,r5
      000018 64 80            [12]  355 	xrl	a,#0x80
      00001A 8F F0            [24]  356 	mov	b,r7
      00001C 63 F0 80         [24]  357 	xrl	b,#0x80
      00001F 95 F0            [12]  358 	subb	a,b
      000021 50 07            [24]  359 	jnc	00105$
      000023 0C               [12]  360 	inc	r4
      000024 BC 00 ED         [24]  361 	cjne	r4,#0x00,00103$
      000027 0D               [12]  362 	inc	r5
      000028 80 EA            [24]  363 	sjmp	00103$
      00002A                        364 00105$:
                                    365 ;	main.c:12: }
      00002A 22               [24]  366 	ret
                                    367 ;------------------------------------------------------------
                                    368 ;Allocation info for local variables in function 'keyscan'
                                    369 ;------------------------------------------------------------
                                    370 ;	main.c:13: void keyscan()
                                    371 ;	-----------------------------------------
                                    372 ;	 function keyscan
                                    373 ;	-----------------------------------------
      00002B                        374 _keyscan:
                                    375 ;	main.c:17: keypressed = 0;
      00002B E4               [12]  376 	clr	a
      00002C F5*00            [12]  377 	mov	_keypressed,a
      00002E F5*01            [12]  378 	mov	(_keypressed + 1),a
                                    379 ;	main.c:19: P1=0xfe;
                                    380 ;	main.c:21: if(P1!=0xfe)
      000030 74 FE            [12]  381 	mov	a,#0xfe
      000032 F5 90            [12]  382 	mov	_P1,a
      000034 B5 90 01         [24]  383 	cjne	a,_P1,00148$
      000037 22               [24]  384 	ret
      000038                        385 00148$:
                                    386 ;	main.c:25: delay(1000);
      000038 90 03 E8         [24]  387 	mov	dptr,#0x03e8
      00003B 12r00r00         [24]  388 	lcall	_delay
                                    389 ;	main.c:27: if(P1!=0xfe)
      00003E 74 FE            [12]  390 	mov	a,#0xfe
      000040 B5 90 03         [24]  391 	cjne	a,_P1,00149$
      000043 02r00rC1         [24]  392 	ljmp	00109$
      000046                        393 00149$:
                                    394 ;	main.c:31: key=P1&0xf0;
      000046 AE 90            [24]  395 	mov	r6,_P1
      000048 7F 00            [12]  396 	mov	r7,#0x00
      00004A 74 F0            [12]  397 	mov	a,#0xf0
      00004C 5E               [12]  398 	anl	a,r6
      00004D F5*02            [12]  399 	mov	_key,a
                                    400 ;	1-genFromRTrack replaced	mov	(_key + 1),#0x00
      00004F 8F*03            [24]  401 	mov	(_key + 1),r7
                                    402 ;	main.c:33: switch(key)
      000051 74 70            [12]  403 	mov	a,#0x70
      000053 B5*02 06         [24]  404 	cjne	a,_key,00150$
      000056 E4               [12]  405 	clr	a
      000057 B5*03 02         [24]  406 	cjne	a,(_key + 1),00150$
      00005A 80 23            [24]  407 	sjmp	00101$
      00005C                        408 00150$:
      00005C 74 B0            [12]  409 	mov	a,#0xb0
      00005E B5*02 06         [24]  410 	cjne	a,_key,00151$
      000061 E4               [12]  411 	clr	a
      000062 B5*03 02         [24]  412 	cjne	a,(_key + 1),00151$
      000065 80 29            [24]  413 	sjmp	00102$
      000067                        414 00151$:
      000067 74 D0            [12]  415 	mov	a,#0xd0
      000069 B5*02 06         [24]  416 	cjne	a,_key,00152$
      00006C E4               [12]  417 	clr	a
      00006D B5*03 02         [24]  418 	cjne	a,(_key + 1),00152$
      000070 80 2F            [24]  419 	sjmp	00103$
      000072                        420 00152$:
      000072 74 E0            [12]  421 	mov	a,#0xe0
      000074 B5*02 06         [24]  422 	cjne	a,_key,00153$
      000077 E4               [12]  423 	clr	a
      000078 B5*03 02         [24]  424 	cjne	a,(_key + 1),00153$
      00007B 80 35            [24]  425 	sjmp	00104$
      00007D                        426 00153$:
                                    427 ;	main.c:36: case 0x70 :
      00007D 80 42            [24]  428 	sjmp	00109$
      00007F                        429 00101$:
                                    430 ;	main.c:37: {   LCD_Send_Command(0x01); //Xoa man hinh
      00007F 75 82 01         [24]  431 	mov	dpl,#0x01
      000082 12r00r00         [24]  432 	lcall	_LCD_Send_Command
                                    433 ;	main.c:38: LCD_Write_String("04");
      000085 90r00r00         [24]  434 	mov	dptr,#___str_0
      000088 75 F0 80         [24]  435 	mov	b,#0x80
      00008B 12r00r00         [24]  436 	lcall	_LCD_Write_String
                                    437 ;	main.c:39: break;
                                    438 ;	main.c:42: case 0xB0 :
      00008E 80 31            [24]  439 	sjmp	00109$
      000090                        440 00102$:
                                    441 ;	main.c:43: {   LCD_Send_Command(0x01); //Xoa man hinh
      000090 75 82 01         [24]  442 	mov	dpl,#0x01
      000093 12r00r00         [24]  443 	lcall	_LCD_Send_Command
                                    444 ;	main.c:44: LCD_Write_String("08");
      000096 90r00r03         [24]  445 	mov	dptr,#___str_1
      000099 75 F0 80         [24]  446 	mov	b,#0x80
      00009C 12r00r00         [24]  447 	lcall	_LCD_Write_String
                                    448 ;	main.c:45: break;
                                    449 ;	main.c:47: case 0xD0 :
      00009F 80 20            [24]  450 	sjmp	00109$
      0000A1                        451 00103$:
                                    452 ;	main.c:48: {   LCD_Send_Command(0x01); //Xoa man hinh
      0000A1 75 82 01         [24]  453 	mov	dpl,#0x01
      0000A4 12r00r00         [24]  454 	lcall	_LCD_Send_Command
                                    455 ;	main.c:49: LCD_Write_String("12");
      0000A7 90r00r06         [24]  456 	mov	dptr,#___str_2
      0000AA 75 F0 80         [24]  457 	mov	b,#0x80
      0000AD 12r00r00         [24]  458 	lcall	_LCD_Write_String
                                    459 ;	main.c:50: break;
                                    460 ;	main.c:52: case 0xE0 :
      0000B0 80 0F            [24]  461 	sjmp	00109$
      0000B2                        462 00104$:
                                    463 ;	main.c:53: {   LCD_Send_Command(0x01); //Xoa man hinh
      0000B2 75 82 01         [24]  464 	mov	dpl,#0x01
      0000B5 12r00r00         [24]  465 	lcall	_LCD_Send_Command
                                    466 ;	main.c:54: LCD_Write_String("16");
      0000B8 90r00r09         [24]  467 	mov	dptr,#___str_3
      0000BB 75 F0 80         [24]  468 	mov	b,#0x80
      0000BE 12r00r00         [24]  469 	lcall	_LCD_Write_String
                                    470 ;	main.c:64: while(P1!=0xfe);
      0000C1                        471 00109$:
      0000C1 74 FE            [12]  472 	mov	a,#0xfe
      0000C3 B5 90 FB         [24]  473 	cjne	a,_P1,00109$
                                    474 ;	main.c:68: keypressed = 1;
      0000C6 75*00 01         [24]  475 	mov	_keypressed,#0x01
      0000C9 75*01 00         [24]  476 	mov	(_keypressed + 1),#0x00
                                    477 ;	main.c:76: }
      0000CC 22               [24]  478 	ret
                                    479 ;------------------------------------------------------------
                                    480 ;Allocation info for local variables in function 'main'
                                    481 ;------------------------------------------------------------
                                    482 ;key_char                  Allocated with name '_main_key_char_65536_20'
                                    483 ;------------------------------------------------------------
                                    484 ;	main.c:78: void main(void)
                                    485 ;	-----------------------------------------
                                    486 ;	 function main
                                    487 ;	-----------------------------------------
      0000CD                        488 _main:
                                    489 ;	main.c:81: LCD_init();
      0000CD 12r00r00         [24]  490 	lcall	_LCD_init
                                    491 ;	main.c:84: while(1){
      0000D0                        492 00102$:
                                    493 ;	main.c:85: keyscan();
      0000D0 12r00r2B         [24]  494 	lcall	_keyscan
                                    495 ;	main.c:89: }
      0000D3 80 FB            [24]  496 	sjmp	00102$
                                    497 	.area CSEG    (CODE)
                                    498 	.area CONST   (CODE)
                                    499 	.area CONST   (CODE)
      000000                        500 ___str_0:
      000000 30 34                  501 	.ascii "04"
      000002 00                     502 	.db 0x00
                                    503 	.area CSEG    (CODE)
                                    504 	.area CONST   (CODE)
      000003                        505 ___str_1:
      000003 30 38                  506 	.ascii "08"
      000005 00                     507 	.db 0x00
                                    508 	.area CSEG    (CODE)
                                    509 	.area CONST   (CODE)
      000006                        510 ___str_2:
      000006 31 32                  511 	.ascii "12"
      000008 00                     512 	.db 0x00
                                    513 	.area CSEG    (CODE)
                                    514 	.area CONST   (CODE)
      000009                        515 ___str_3:
      000009 31 36                  516 	.ascii "16"
      00000B 00                     517 	.db 0x00
                                    518 	.area CSEG    (CODE)
                                    519 	.area XINIT   (CODE)
                                    520 	.area CABS    (ABS,CODE)
